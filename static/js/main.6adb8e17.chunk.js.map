{"version":3,"sources":["logo.svg","components/Board/Square/index.js","components/Board/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Square","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","content","onClick","index","np","setState","react_default","a","createElement","className","bind","isWinningLine","height","width","cx","cy","r","stroke","strokeWidth","fill","x1","y1","x2","y2","Component","Board","s","playerTurn","playerFirst","lines","linesWithIndexes","startGame","_this2","console","log","isDefence","computerTurn","_this3","indexOf","obj","setTimeout","line","st","delay","_this4","isWinner","self","takeTurn","newSquares","getAllIndexes","arr","val","indexes","i","push","checkLines","mark","length","count","j","goInACorner","justChecking","findSquareInLine","lineIndexes","testWin","computer","player","onWin","user","rowIndex","getIndex","turn","_this5","map","Square_Square","key","App","Board_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6adb8e17.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\nimport './style.css'\n\nexport default class Square extends Component {\n\n\tconstructor(props){\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tcontent: 0\n\t\t}\n\t}\n\n\tonClick(){\n\t\tthis.props.onClick(this.props.index)\n\t}\n\n\tcomponentWillReceiveProps(np){\n\t\tif (this.props.content === 0 && np.content === 1){\n\t\t\tthis.setState({content: 1})\t\n\t\t}\n\t\telse if (this.props.content === 0 && np.content === 2){\n\t\t\tthis.setState({content: 2})\t\n\t\t} else if (this.props.content !== 0 && np.content === 0){\n\t\t\tthis.setState({content:0})\n\t\t} \n\t}\n\n\trender(){\n\t\treturn(\n\t\t\t<div className=\"square\" onClick={this.onClick.bind(this)}>\n\t\t\t\t\t<div className={this.props.isWinningLine ? \"svgContainer1 winner\" : 'svgContainer1'}>\n\t\t\t\t\t\t<svg height=\"50\" width=\"50\">\n\t\t\t\t\t\t  <circle className={this.state.content === 1 ? 'filled path' : 'path'}cx=\"25\" cy=\"25\" r=\"20\" stroke=\"#ebebeb\" strokeWidth=\"4\" fill=\"transparent\" />\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className={this.props.isWinningLine ? \"svgContainer2 winner\" : 'svgContainer2'}>\n\t\t\t\t\t\t<svg height=\"40\" width=\"40\">\n\t\t\t\t\t\t    <line className={this.state.content === 2 ? 'filled path' : 'path'}x1=\"0\" y1=\"0\" x2=\"40\" y2=\"40\" strokeWidth=\"4\" stroke=\"#ebebeb\"/>\n\t\t\t\t\t\t \t<line className={this.state.content === 2 ? 'filled path2' : 'path2'}x1=\"40\" y1=\"0\" x2=\"0\" y2=\"40\" strokeWidth=\"4\" stroke=\"#ebebeb\"/>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}","import React, { Component } from 'react'\nimport './style.css'\nimport Square from './Square'\n\nexport default class Board extends Component {\n\n\tconstructor(props){\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\ts: [0,0,0,0,0,0,0,0,0],\n\t\t\tplayerTurn: false,\n\t\t\tplayerFirst: false,\n\n\t\t}\n\t\tthis.lines = [\n\t\t\t[0,3,6],\n\t\t\t[1,4,7],\n\t\t\t[2,5,8],\n\t\t\t[0,1,2],\n\t\t\t[3,4,5],\n\t\t\t[6,7,8],\n\t\t\t[0,4,8],\n\t\t\t[2,4,6],\n\t\t]\n\t\tthis.linesWithIndexes = [\n\t\t\t[0,3,6],\n\t\t\t[1,3],\n\t\t\t[2,3,7],\n\t\t\t[0,4],\n\t\t\t[1,4],\n\t\t\t[2,4],\n\t\t\t[0,5,7],\n\t\t\t[1,5]\n\t\t\t[2,5,6]\n\t\t]\n\t}\n\n\tcomponentWillMount(){\n\t\tthis.startGame()\n\t}\n\n\tstartGame(){\n\t\tconsole.log('starting game')\n\t\t//reset the board\n\t\tthis.setState({\n\t\t\ts: [0,0,0,0,0,0,0,0,0],\n\t\t\tisDefence:false,\n\t\t\tplayerFirst: !this.state.playerFirst,\n\t\t\tplayerTurn: !this.state.playerFirst\n\t\t}, () => {\n\n\t\t\t// if it is the computer's turn then take first move\n\t\t\tif (!this.state.playerTurn) this.computerTurn()\n\t\t})\n\t}\n\n\t\n\n\n\tonClick(index){\n\t\t//if it is the player's turn and the square they clicked on is empty\n\t\tif (this.state.playerTurn && this.state.s[index] === 0){\n\t\t\t//if the player goes first and goes in the corner, play a defensive game.\n\t\t\tlet isDefence = this.state.s.indexOf(1) < 0 && (index === 0 || index === 2 || index === 6 || index === 8)\n\t\t\t//fill in square for player\n\n\t\t\tthis.state.s[index] = 2\n\t\t\tlet obj = {s: this.state.s, playerTurn: false}\n\t\t\tif (isDefence) obj.isDefence = true\n\t\t\tthis.setState(obj, () => {\n\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tconsole.log('player has taken their turn, isDefence', this.state.isDefence)\n\t\t\t\t\tif (this.state.s.indexOf(0) < 0){\n\t\t\t\t\t\tconsole.log('should be the end')\n\t\t\t\t\t\tthis.startGame()\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.log('called computer')\n\t\t\t\t\t\tthis.computerTurn()\n\t\t\t\t\t}\n\t\t\t\t}, 1000)\n\t\t\t})\n\t\t}\n\t}\n\n\tonWin(line){\n\t\n\t\tconsole.log('winning line ', line)\n\t\tthis.st(this.lines[line][0],300)\n\t\tthis.st(this.lines[line][1],600)\n\t\tthis.st(this.lines[line][2],900)\n\t\tthis.st(null,1200)\n\t}\n\n\tst(index, delay){\n\t\tconsole.log('setting index', index, delay)\n\t\tsetTimeout(() => {\n\t\t\tthis.setState({isWinner: index})\n\t\t},delay)\n\t}\n\n\n\n\tcomputerTurn(){\n\n\t\tlet self = this;\n\t\t\n\t\tfunction takeTurn(index){\n\t\t\tlet newSquares = self.state.s\n\t\t\tnewSquares[index] = 1\n\t\t\tself.setState({s: newSquares, playerTurn: true}, () => {\n\t\t\t\tif (self.state.s.indexOf(0) < 0) setTimeout(() => {self.startGame()},300)\n\t\t\t})\n\t\t}\n\n\t\tfunction getAllIndexes(arr, val) {\n\t\t    var indexes = [], i = -1;\n\t\t    while ((i = arr.indexOf(val, i+1)) != -1) indexes.push(i);\n\t\t    return indexes;\n\t\t}\n\n\t\tfunction goNextToUser(){\n\t\t\tfunction getIndex(){\n\t\t\t\tlet user = self.state.s.indexOf(2)\n\t\t\t\tfor (var i = 0; i < self.lines.length; i++){\n\t\t\t\t\tlet index = self.lines[i].indexOf(user)\n\t\t\t\t\tif (index > -1){\n\t\t\t\t\t\tlet rowIndex = index === 1 ? 2 : 1\n\t\t\t\t\t\treturn self.lines[i][rowIndex]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ttakeTurn(getIndex())\t\n\t\t}\n\n\t\tfunction checkLines(mark){\n\t\t\tlet lines= [];\n\t\t\tfor (var i = 0 ; i < self.lines.length; i++){\n\t\t\t\tlet count = 0;\n\t\t\t\tfor (var j = 0; j < self.lines[i].length; j++){\n\t\t\t\t\tif (self.state.s[self.lines[i][j]] === mark){\t\n\t\t\t\t\t\tcount += 1\n\t\t\t\t\t} \n\t\t\t\t}\n\t\t\t\tlines.push(count)\n\t\t\t}\n\t\t\treturn lines\n\t\t}\n\n\t\tfunction goInACorner(justChecking){\n\t\t\tlet index = self.state.s[8] === 0 ? 8 : self.state.s[6] === 0 ? 6 : self.state.s[2] === 0 ? 2 : self.state.s[0] === 0 ? 0 : false\n\t\t\tif ((index || index === 0)&& !justChecking) takeTurn(index)\n\t\t\telse if (index  || index === 0) return true\n\t\t\telse return false\n\t\t}\n\n\t\tfunction findSquareInLine(lineIndexes, testWin){\n\t\t\tfor(var j = 0; j < lineIndexes.length; j++){\n\t\t\t\tfor (var i = 0; i < self.lines[lineIndexes[j]].length; i++){\n\t\t\t\t\tlet square = self.state.s[self.lines[lineIndexes[j]][i]]\n\t\t\t\t\tif (square === 0){\n\t\t\t\t\t\ttakeTurn(self.lines[lineIndexes[j]][i])\n\t\t\t\t\t\treturn true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\treturn testWin ? lineIndexes : false\n\t\t}\n\n\t\tfunction turn(){\n\t\t\tlet computer = getAllIndexes(checkLines(1), 2)\n\t\t\tlet player = getAllIndexes(checkLines(2),2)\n\t\t\t// if the computer has 2 in a line and there is an empty square, find the square to win it.\n\t\t\tif(computer.length > 0 && findSquareInLine(computer)) {\n\t\t\t\tconsole.log('computer has won')\n\t\t\t\tself.onWin(findSquareInLine(getAllIndexes(checkLines(1), 3), true))\n\t\t\t\tsetTimeout(() => {self.startGame()},1500)\n\t\t\t}\n\t\t\t// if the opponent has 2 in a line and there is an empty square, find the square to block it.\n\t\t\telse if(player.length > 0 && findSquareInLine(player)){\n\t\t\t\tconsole.log('blocked player')\n\t\t\t}\n\t\t\t//if user went first in a corner, get them to play the middle line\n\t\t\telse if (self.state.isDefence && self.state.s[4] === 0){\n\t\t\t\tconsole.log('going in middle')\n\t\t\t\ttakeTurn(4)\n\t\t\t}\n\t\t\t// if user went first and went in a corner\n\t\t\telse if (self.state.isDefence){\n\t\t\t\tconsole.log('should go next to em')\n\t\t\t\tgoNextToUser()\n\t\t\t}\n\t\t\t\n\t\t\telse if (goInACorner(true)){\n\t\t\t\tgoInACorner()\n\t\t\t} else {\n\t\t\t\ttakeTurn(self.state.s.indexOf(0))\n\t\t\t}\n\t\t}\n\t\tturn()\t\t\n\t}\n\n\trender(){\n\t\treturn(\n\t\t\t<div className=\"outerBoard\">\n\t\t\t<div className=\"board\">\n\t\t\t\t{this.state.s.map((s,i) => {\n\t\t\t\t\treturn(\n\t\t\t\t\t\t<Square\n\t\t\t\t\t\t\tisWinningLine={i === this.state.isWinner}\n\t\t\t\t\t\t\tonClick={this.onClick.bind(this)}\n\t\t\t\t\t\t\tindex={i} \n\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\tcontent={s}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)\n\t\t\t\t})}\n\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Board from './components/Board'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Board />\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}