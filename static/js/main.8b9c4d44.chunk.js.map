{"version":3,"sources":["logo.svg","components/Square/index.js","components/Board/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Square","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","content","onClick","index","np","setState","react_default","a","createElement","className","bind","style","borderColor","color","isWinningLine","height","size","width","cx","cy","r","stroke","strokeWidth","fill","x1","y1","x2","y2","Component","Board","s","playerTurn","playerFirst","lines","linesWithIndexes","startGame","_this2","console","log","isDefence","computerTurn","_this3","indexOf","obj","checkLines","onWin","setTimeout","line","_this4","length","st","delay","_this5","isWinner","mark","altSquares","squares","i","count","j","push","self","takeRandomMove","Promise","resolve","reject","possibleIndexes","Math","floor","random","newSquares","winningLine","hasWon","takeTurn","turnDefenceOff","getAllIndexes","arr","val","indexes","goInACorner","justChecking","findSquareInLine","lineIndexes","testWin","computer","player","skill","then","move","user","rowIndex","getIndex","turn","_this6","map","Square_Square","key","defaultProps","App","Board_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8b9c4d44.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\nimport './style.css'\n\nexport default class Square extends Component {\n\n\tconstructor(props){\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tcontent: 0\n\t\t}\n\t}\n\n\tonClick(){\n\t\tthis.props.onClick(this.props.index)\n\t}\n\n\tcomponentWillReceiveProps(np){\n\t\tif (this.props.content === 0 && np.content === 1){\n\t\t\tthis.setState({content: 1})\t\n\t\t}\n\t\telse if (this.props.content === 0 && np.content === 2){\n\t\t\tthis.setState({content: 2})\t\n\t\t} else if (this.props.content !== 0 && np.content === 0){\n\t\t\tthis.setState({content:0})\n\t\t} \n\t}\n\n\trender(){\n\t\treturn(\n\t\t\t<div className=\"square\" onClick={this.onClick.bind(this)} style={{borderColor: this.props.color}}>\n\t\t\t\t\t<div className={this.props.isWinningLine ? \"svgContainer1 winner\" : 'svgContainer1'}>\n\t\t\t\t\t\t<svg height={this.props.size } width={this.props.size }>\n\t\t\t\t\t\t  <circle className={this.state.content === 1 ? 'filled path' : 'path'}cx={this.props.size /2} cy={this.props.size /2} r={this.props.size /4} stroke={this.props.color} strokeWidth=\"4\" fill=\"transparent\" />\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className={this.props.isWinningLine ? \"svgContainer2 winner\" : 'svgContainer2'}>\n\t\t\t\t\t\t<svg height={this.props.size /2} width={this.props.size /2}>\n\t\t\t\t\t\t    <line className={this.state.content === 2 ? 'filled path' : 'path'}x1=\"0\" y1=\"0\" x2={this.props.size /2} y2={this.props.size /2} strokeWidth=\"4\" stroke={this.props.color}/>\n\t\t\t\t\t\t \t<line className={this.state.content === 2 ? 'filled path2' : 'path2'}x1={this.props.size /2} y1=\"0\" x2=\"0\" y2={this.props.size /2} strokeWidth=\"4\" stroke={this.props.color}/>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}","import React, { Component } from 'react'\nimport './style.css'\nimport Square from '../Square'\n\nexport default class Board extends Component {\n\n\tconstructor(props){\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\ts: [0,0,0,0,0,0,0,0,0],\n\t\t\tplayerTurn: false,\n\t\t\tplayerFirst: false,\n\t\t}\n\n\t\t\n\t\tthis.lines = [\n\t\t\t[0,3,6],\n\t\t\t[1,4,7],\n\t\t\t[2,5,8],\n\t\t\t[0,1,2],\n\t\t\t[3,4,5],\n\t\t\t[6,7,8],\n\t\t\t[0,4,8],\n\t\t\t[2,4,6],\n\t\t]\n\t\tthis.linesWithIndexes = [\n\t\t\t[0,3,6],\n\t\t\t[1,3],\n\t\t\t[2,3,7],\n\t\t\t[0,4],\n\t\t\t[1,4],\n\t\t\t[2,4],\n\t\t\t[0,5,7],\n\t\t\t[1,5]\n\t\t\t[2,5,6]\n\t\t]\n\t}\n\n\tcomponentWillMount(){\n\t\tthis.startGame()\n\t}\n\n\tstartGame(){\n\t\tconsole.log('starting game')\n\t\t//reset the board\n\t\tthis.setState({\n\t\t\ts: [0,0,0,0,0,0,0,0,0],\n\t\t\tisDefence:false,\n\t\t\tplayerFirst: !this.state.playerFirst,\n\t\t\tplayerTurn: !this.state.playerFirst\n\t\t}, () => {\n\t\t\t// if it is the computer's turn then take first move\n\t\t\tif (!this.state.playerTurn) this.computerTurn()\n\t\t})\n\t}\n\n\t\n\n\n\tonClick(index){\n\t\t//if it is the player's turn and the square they clicked on is empty\n\t\tif (this.state.playerTurn && this.state.s[index] === 0){\n\t\t\t//if the player goes first and goes in the corner, play a defensive game.\n\t\t\tlet isDefence = this.state.s.indexOf(1) < 0 && (index === 0 || index === 2 || index === 6 || index === 8)\n\t\t\t//fill in square for player\n\n\t\t\tthis.state.s[index] = 2\n\t\t\tlet obj = {s: this.state.s, playerTurn: false}\n\t\t\tif (isDefence) obj.isDefence = true\n\t\t\tthis.setState(obj, () => {\n\t\t\t\tif (this.checkLines(2).indexOf(3) > -1){\n\t\t\t\t\tconsole.log(this.lines, this.checkLines(2).indexOf(3), this.lines[this.checkLines(2).indexOf(3)])\n\t\t\t\t\tthis.onWin(this.checkLines(2).indexOf(3))\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\n\t\t\t\t\tif (this.state.s.indexOf(0) < 0){\n\t\t\t\t\t\tconsole.log('should be the end')\n\t\t\t\t\t\tthis.startGame()\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.computerTurn()\n\t\t\t\t\t}\n\t\t\t\t}, 1000)\n\t\t\t})\n\t\t}\n\t}\n\n\tonWin(line){\n\t\tconsole.log('on win', line)\n\t\tline = line.length > 1 ? line[0] : line\n\t\tconsole.log('on win after adjustment', line)\n\t\tthis.st(this.lines[line][0],300)\n\t\tthis.st(this.lines[line][1],600)\n\t\tthis.st(this.lines[line][2],900)\n\t\tthis.st(null,1200)\n\t\tsetTimeout(() => {\n\t\t\tthis.startGame()\n\t\t},2000)\n\t}\n\n\tst(index, delay){\n\t\t\n\t\tsetTimeout(() => {\n\t\t\tthis.setState({isWinner: index})\n\t\t},delay)\n\t}\n\n\tcheckLines(mark, altSquares){\n\t\tlet squares = altSquares ? altSquares : this.state.s\n\t\tconsole.log('checking lines', altSquares)\n\t\tlet lines= [];\n\t\tfor (var i = 0 ; i < this.lines.length; i++){\n\t\t\tlet count = 0;\n\t\t\tfor (var j = 0; j < this.lines[i].length; j++){\n\t\t\t\tif (squares[this.lines[i][j]] == mark){\t\n\t\t\t\t\tcount += 1\n\t\t\t\t} \n\t\t\t}\n\t\t\tlines.push(count)\n\t\t}\n\t\treturn lines\n\t}\n\n\n\n\tcomputerTurn(){\n\t\tlet self = this;\n\t\tfunction checkIfRandomMove(){\n\t\t\tlet r = Math.random() \n\t\t\t\n\t\t\tif (r > self.props.skill) return true\n\t\t\treturn false\n\t\t}\t\n\n\t\tfunction takeRandomMove(){\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tlet possibleIndexes = []\n\t\t\t\tfor (var i = 0; i < self.state.s.length; i++){\n\t\t\t\t\tif (self.state.s[i] === 0) possibleIndexes.push(i)\n\t\t\t\t}\n\t\t\t\tlet index = possibleIndexes[Math.floor(Math.random() * possibleIndexes.length)]\n\t\t\t\t\n\t\t\t\tvar newSquares = []\n\t\t\t\tfor (var i = 0; i < self.state.s.length; i++){\n\t\t\t\t\tnewSquares.push(self.state.s[i])\n\t\t\t\t}\n\t\t\t\tconsole.log(newSquares)\n\t\t\t\tconsole.log('index', index)\n\t\t\t\tnewSquares[index] = 1\n\t\t\t\tconsole.log(newSquares)\n\t\t\t\t\tlet winningLine =self.checkLines(1, newSquares)\n\t\t\t\t\tconsole.log(winningLine)\n\t\t\t\t\tif (winningLine.indexOf(3) > -1){\n\t\t\t\t\t\tconsole.log('random move has won it')\n\t\t\t\t\t\tresolve({index: index, hasWon: winningLine.indexOf(3)})\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve({index: index, hasWon: false})\n\t\t\t\t\t}\n\t\t\n\t\t\t})\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t}\n\n\t\t\n\t\tfunction takeTurn(index, turnDefenceOff, hasWon){\n\t\t\t//this handles difficulty.  \n\t\t\t\n\t\t\tconsole.log('has won in take turn', hasWon)\n\t\t\tlet newSquares = self.state.s\n\t\t\tnewSquares[index] = 1\n\t\t\tlet obj = {s: newSquares, playerTurn: true}\n\t\t\tif (turnDefenceOff) obj.isDefence = false\n\t\t\tself.setState(obj, () => {\n\t\t\t\t\n\t\t\t\tif (hasWon  || hasWon === 0){\n\t\t\t\t\treturn self.onWin(hasWon)\n\t\t\t\t} else if (self.state.s.indexOf(0) < 0) setTimeout(() => {self.startGame()},300)\n\t\t\t})\n\t\t}\n\n\t\tfunction getAllIndexes(arr, val) {\n\t\t    var indexes = [], i = -1;\n\t\t    while ((i = arr.indexOf(val, i+1)) != -1) indexes.push(i);\n\t\t    return indexes;\n\t\t}\n\n\t\tfunction goNextToUser(){\n\t\t\tfunction getIndex(){\n\t\t\t\tlet user = self.state.s.indexOf(2)\n\t\t\t\tfor (var i = 0; i < self.lines.length; i++){\n\t\t\t\t\tlet index = self.lines[i].indexOf(user)\n\t\t\t\t\tif (index > -1){\n\t\t\t\t\t\tlet rowIndex = index === 1 ? 2 : 1\n\t\t\t\t\t\treturn self.lines[i][rowIndex]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ttakeTurn(getIndex(), true)\t\n\t\t}\n\n\t\t\n\n\t\tfunction goInACorner(justChecking){\n\t\t\tlet index = self.state.s[8] === 0 ? 8 : self.state.s[6] === 0 ? 6 : self.state.s[2] === 0 ? 2 : self.state.s[0] === 0 ? 0 : false\n\t\t\tif ((index || index === 0)&& !justChecking) takeTurn(index)\n\t\t\telse if (index  || index === 0) return true\n\t\t\telse return false\n\t\t}\n\n\t\tfunction findSquareInLine(lineIndexes, testWin){\n\t\t\tfor(var j = 0; j < lineIndexes.length; j++){\n\t\t\t\tfor (var i = 0; i < self.lines[lineIndexes[j]].length; i++){\n\t\t\t\t\tlet square = self.state.s[self.lines[lineIndexes[j]][i]]\n\t\t\t\t\tif (square === 0){\n\t\t\t\t\t\ttakeTurn(self.lines[lineIndexes[j]][i], true)\n\t\t\t\t\t\treturn true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\treturn testWin ? lineIndexes : false\n\t\t}\n\n\t\tfunction turn(){\n\t\t\tlet computer = getAllIndexes(self.checkLines(1), 2)\n\t\t\tlet player = getAllIndexes(self.checkLines(2),2)\n\t\t\t//take a random move if skill threshold is not met\n\t\t\tlet isRandomMove = checkIfRandomMove()\n\t\t\tif (isRandomMove) {\n\t\t\t\tconsole.log('is random')\n\t\t\t\ttakeRandomMove().then((move) => {\n\t\t\t\t\ttakeTurn(move.index, false, move.hasWon)\n\t\t\t\t})\n\t\t\t\t\n\t\t\t}\n\n\t\t\t// if the computer has 2 in a line and there is an empty square, find the square to win it.\n\t\t\telse if(computer.length > 0 && findSquareInLine(computer)) {\n\t\t\t\tconsole.log('won on strategy')\n\t\t\t\tself.onWin(findSquareInLine(getAllIndexes(self.checkLines(1), 3), true))\n\t\t\t\t\n\t\t\t}\n\t\t\t// if the opponent has 2 in a line and there is an empty square, find the square to block it.\n\t\t\telse if(player.length > 0 && findSquareInLine(player)){\n\t\t\t\tconsole.log('blocked player')\n\t\t\t}\n\t\t\t//if user went first in a corner, get them to play the middle line\n\t\t\telse if (self.state.isDefence && self.state.s[4] === 0){\n\t\t\t\tconsole.log('going in middle')\n\t\t\t\ttakeTurn(4, false)\n\t\t\t}\n\t\t\t// if user went first and went in a corner\n\t\t\telse if (self.state.isDefence){\n\t\t\t\tconsole.log('should go next to em')\n\t\t\t\tgoNextToUser()\n\t\t\t}\n\t\t\t\n\t\t\telse if (goInACorner(true)){\n\t\t\t\tconsole.log('going in a corner')\n\t\t\t\tgoInACorner()\n\t\t\t} else {\n\t\t\t\ttakeRandomMove().then((move) => {\n\t\t\t\t\ttakeTurn(move.index, false, move.hasWon)\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t\tturn()\t\t\n\t}\n\n\trender(){\n\t\treturn(\n\t\t\t<div className=\"outerBoard\" style={{width: this.props.size - (Math.floor((this.props.size / 100)) + 7) + 'px', height: this.props.size - (Math.floor((this.props.size / 100)) + 7) + 'px'}}>\n\t\t\t<div className=\"board\" style={{width: this.props.size + 'px', height: this.props.size + 'px'}}>\n\t\t\t\t{this.state.s.map((s,i) => {\n\t\t\t\t\treturn(\n\t\t\t\t\t\t<Square\n\t\t\t\t\t\t\tcolor={this.props.color}\n\t\t\t\t\t\t\tsize={Math.floor(this.props.size / 3)}\n\t\t\t\t\t\t\tisWinningLine={i === this.state.isWinner}\n\t\t\t\t\t\t\tonClick={this.onClick.bind(this)}\n\t\t\t\t\t\t\tindex={i} \n\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\tcontent={s}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)\n\t\t\t\t})}\n\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n\nBoard.defaultProps = {\n\tsize: 300,\n  \tskill: 0,\n  \tcolor:'#101010'\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Board from './components/Board'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Board \n        \tcolor=\"#ebebeb\"\n        />\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}